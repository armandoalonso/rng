// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "plugin",
  id: "piranha305_rng",
  name: "RNG",
  version: "1.0.0.2",
  category:
    "other",
  author: "piranha305",
  website: "https://piranha305.itch.io/",
  documentation: "https://github.com/armandoalonso/rng/blob/main/README.md",
  description: "Provides random utilities Actions / Conditions / Expressions for Construct 3, include a Seperate Random Number Generator based on Mersenne Twister", 
  addonUrl: "https://www.construct.net/en/make-games/addons/1075/rng",
  githubUrl: "https://github.com/armandoalonso/rng",
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  // world, object, dom
  type: "object",
  domSideScripts: [
    // "domSide.js", // no need to include "c3runtime/" prefix
  ],
  fileDependencies: [
    {
      filename: "mersenneTwister.js",
      type: "inline-script",
    }
     /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    // world only
    defaultImageUrl: null,
    Set: {
      // world only
      IsResizable: false,
      IsRotatable: false,
      Is3D: false,
      HasImage: false,
      IsTiled: false,
      SupportsZElevation: false,
      SupportsColor: false,
      SupportsEffects: false,
      MustPreDraw: false,

      // object only
      IsSingleGlobal: true,

      // world and object
      CanBeBundled: true,
      IsDeprecated: false,
      GooglePlayServicesEnabled: false,
    },
    AddCommonACEs: {
      // world only
      Position: false,
      SceneGraph: false,
      Size: false,
      Angle: false,
      Appearance: false,
      ZOrder: false,
    },
  },
  properties: [
    {
      type: "check",
      id: "replace_seed",
      name: "Replace System Seed",
      desc: "Replace the seed with a new one",
      options: {
        initialValue: false
      }
    },
    {
      type: "text",
      id: "seed",
      name: "Seed",
      desc: "The seed to use for the RNG",
      options: {
        initialValue: ""
      }
    }
     /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "color"
        "object"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type object only
        // allowedPluginIds: ["Sprite", "<world>"],

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
  ],
  aceCategories: {
    general: "General",
  },
  Acts: {
    SetSeed: {
      category: "general",
      forward: "_SetSeed",
      autoScriptInterface: true,
      deprecated: false,
      params: [
        {
          id: "seed",
          name: "Seed",
          desc: "The seed to use for the RNG",
          type: "string",
          value: "",
        },
      ],
      listName: "Set Seed",
      displayText: "Set seed to {0}",
      description: "Sets the seed to use for the RNG",
    },
    RollDice: {
      category: "general",
      forward: "_RollDiceWithTag",
      autoScriptInterface: true,
      deprecated: false,
      params: [
        {
          id: "numDice",
          name: "Number of Dice",
          desc: "The number of dice to roll",
          type: "number",
          value: "1",
        },
        {
          id: "numSides",
          name: "Number of Sides",
          desc: "The number of sides on each die",
          type: "number",
          value: "6",
        },
        {
          id: "modifier",
          name: "Modifier",
          desc: "The modifier to add to the roll",
          type: "number",
          value: "0",
        },
        {
          id: "tag",
          name: "Tag",
          desc: "Tag of the dice",
          type: "string",
          default: "",
        }
      ],
      listName: "Roll Dice",
      displayText: "Roll {0}d{1}+{2} with tag ({3})",
      description: "Rolls a number of dice with a number of sides and adds a modifier",
    },
    LoadJsonData:{
      category: "general",
      forward: "_LoadJsonData",
      autoScriptInterface: true,
      deprecated: false,
      params: [
        {
          id: "tag",
          name: "Tag",
          desc: "Tag of the JSON",
          type: "string",
          value: "default",
        },
        {
          id: "json",
          name: "JSON",
          desc: "The JSON to load",
          type: "string",
          value: "",
        },
      ],
      listName: "Load JSON Data",
      displayText: "Load JSON Data {1} with tag ([b]{0}[/b])",
      description: "Loads JSON data",
    }
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
  },
  Cnds: {
    Chance: {
      category: "general",
      forward: "_Chance",
      autoScriptInterface: true,
      params: [
        {
          id: "chance",
          name: "Chance",
          desc: "The chance of the condition being true",
          type: "number",
          value: 0.5,
        },
      ],
      listName: "Chance",
      displayText: "Chance [i]{0}[/i]",
      description: "Returns true with a given chance",
    },
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      displayText: "Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
  },
  Exps: {
    Roll: {
      category: "general",
      forward: "_RollDice",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'number',
      isVariadicParameters: false,
      params: [
        {
          id: "numDice",
          name: "Number of Dice",
          desc: "The number of dice to roll",
          type: "number",
          value: "1",
        },
        {
          id: "numSides",
          name: "Number of Sides",
          desc: "The number of sides on each die",
          type: "number",
          value: "6",
        },
        {
          id: "modifier",
          name: "Modifier",
          desc: "The modifier to add to the roll",
          type: "number",
          value: "0",
        },
      ],
      listName: "Roll Dice",
      displayText: "Roll {0}d{1} +{2}",
      description: "Rolls a number of dice with a number of sides and adds a modifier",
    },
    GetDiceFromLastRoll:{
      category: "general",
      forward: "_GetDiceFromLastRoll",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'number',
      isVariadicParameters: false,
      params: [
        {
          id: "index",
          name: "Index",
          desc: "The index of the die to get",
          type: "number",
          value: "0",
        },
      ],
      listName: "Get Dice From Last Roll",
      displayText: "Get die {0} from last roll",
      description: "Gets a die from the last roll",
    },
    GetDiceRollSum : {
      category: "general",
      forward: "_GetDiceRollSum",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'number',
      isVariadicParameters: false,
      params: [
        {
          "id": "tag",
          "name": "Tag",
          "desc": "The tag of the roll to get the sum of",
          "type": "string",
          "value": ""
        }
      ],
      listName: "Get Dice Roll Sum",
      displayText: "Get sum of roll {0}",
      description: "Gets the sum of a roll",
    },
    GetDiceRollValue : {
      category: "general",
      forward: "_GetDiceRollValue",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'number',
      isVariadicParameters: false,
      params: [
        {
          "id": "tag",
          "name": "Tag",
          "desc": "The tag of the roll to get the value of",
          "type": "string",
          "value": ""
        },
        {
          "id": "index",
          "name": "Index",
          "desc": "The index of the die to get the value of",
          "type": "number",
          "value": "0"
        }
      ],
      listName: "Get Dice Roll Value",
      displayText: "Get value of {1} Die in Roll with tag {0}",
      description: "Gets the value of a roll",
    },
    GetRandomFromCSV: {
      category: "general",
      forward: "_PickRandomFromCVS",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "csv",
          "name": "CSV",
          "desc": "The CSV to get a random value from",
          "type": "string",
          "value": ""
        }
      ],
      listName: "Get Random From CSV",
      displayText: "Get random value from CSV {0}",
      description: "Gets a random value from a CSV",
    },
    GetRandomFromCSVWeighted: {
      category: "general",
      forward: "_PickRandomFromCSVWeighted",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "csv",
          "name": "CSV",
          "desc": "The CSV to get a random value from",
          "type": "string",
          "value": ""
        },
        {
          "id": "weights",
          "name": "Weights",
          "desc": "The weights of the CSV values",
          "type": "string",
          "value": ""
        }
      ],
      listName: "Get Random From CSV Weighted",
      displayText: "Get random value from CSV {0} with weights {1}",
      description: "Gets a random value from a CSV with weights",
    },
    RandomString: {
      category: "general",
      forward: "_RandomString",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "length",
          "name": "Length",
          "desc": "The length of the string to generate",
          "type": "number",
          "value": "10"
        }
      ],
      listName: "Random String",
      displayText: "Generate random string of length {0}",
      description: "Generates a random string",
    },
    RandomNumber: {
      category: "general",
      forward: "_RandomStringOnlyNumbers",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "length",
          "name": "Length",
          "desc": "The length of the number to generate",
          "type": "number",
          "value": "10"
        }
      ],
      listName: "Random Number",
      displayText: "Generate random number of length {0}",
      description: "Generates a random number",
    },
    RandomStringFromPool: {
      category: "general",
      forward: "_RandomStringFromPool",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "length",
          "name": "Length",
          "desc": "The length of the string to generate",
          "type": "number",
          "value": "10"
        },
        {
          "id": "pool",
          "name": "Pool",
          "desc": "The pool of characters to generate the string from",
          "type": "string",
          "value": ""
        }
      ],
      listName: "Random String From Pool",
      displayText: "Generate random string from pool {0} of length {1}",
      description: "Generates a random string from a pool of characters",
    },
    RandomFromJson: {
      category: "general",
      forward: "_PickRandomFromJsonArray",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [
        {
          "id": "tag",
          "name": "Tag",
          "desc": "The tag of the JSON",
          "type": "string",
          "value": "default"
        },
        {
          "id": "path",
          "name": "Path",
          "desc": "The path to the JSON array",
          "type": "string",
          "value": ""
        }
      ],
      listName: "Random From JSON",
      displayText: "Get random value from JSON at{0}",
      description: "Gets a random value from a JSON array",
    },
    Guid: {
      category: "general",
      forward: "_Guid",
      autoScriptInterface: true,
      highlight: true,
      deprecated: false,
      returnType: 'string',
      isVariadicParameters: false,
      params: [],
      listName: "Guid",
      displayText: "Generate Guid",
      description: "Generates a Guid",
    },
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
  },
};
